name: "Automatic - build and test feature branch"

on:
  push:
    branches-ignore: 
      - master
    paths-ignore: 
      - .github

    
env:
  REGISTRY_IMAGE: jammyboi/cgwebscrape
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v8
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: startsWith(matrix.platform, 'linux/arm')
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove slash from platform
        id: remove_slash
        env:
            PLATFORM: ${{ matrix.platform }}
        run: |
            echo "PLATFORM=${PLATFORM}"
            echo "platform_without_slash=$(echo $PLATFORM | tr -d '/')"  >> "$GITHUB_ENV"

      - name: Set up Docker BuildKit
        run: echo 'DOCKER_BUILDKIT=1' >> $GITHUB_ENV

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: BUILDKIT_INLINE_CACHE=1
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=jammyboi/cgwebscrape:multi-${{ env.platform_without_slash }}-${{ github.ref_name }}-buildcache
          cache-to: type=registry,ref=jammyboi/cgwebscrape:multi-${{ env.platform_without_slash }}-${{ github.ref_name }}-buildcache
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  
  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  test: # Test containers that were pushed
      runs-on: ubuntu-latest
      needs:
        - merge
      strategy:
        fail-fast: false
        matrix:
          platform:
            # - linux/arm/v8
            # - linux/arm/v7
            # - linux/arm64
            - linux/amd64
      steps:

        - name: Checkout
          uses: actions/checkout@v3
        
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2
          if: startsWith(matrix.platform, 'linux/arm')

        - name: Make Credentials.py
          run: |
              printf 'api_token = "${{ secrets.api_token}}"\nchat_id="${{secrets.DEVELOPMENT_GROUP_CHAT_ID}}"' > /home/runner/work/cargiantscrape/cargiantscrape/credentials.py
  
  

        - name: Run Tests on built docker image
          run: |
            docker run --platform ${{ matrix.platform }} -v /home/runner/work/cargiantscrape/cargiantscrape/credentials.py:/app/credentials.py --rm ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }} scrape_only.py
       
       
        - name: Run 11. calculate_prices_on_db.py
          run: |
            docker run --platform ${{ matrix.platform }} -v /home/runner/work/cargiantscrape/cargiantscrape/credentials.py:/app/credentials.py --rm ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }} "/home/runner/work/cargiantscrape/cargiantscrape/tools/11. calculate_prices_on_db.py"

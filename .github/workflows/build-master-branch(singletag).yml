name: Parallel Build and Push with Caching

on:
  push: 
    branches: 
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [linux/386, linux/amd64, linux/arm/v7, linux/arm/v8]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        id: cache-layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: layers-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            layers-${{ runner.os }}-

      - name: Build and push image
        id: build-push-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: "mytempimage-${{ matrix.platform }}"
          platforms: ${{ matrix.platform }}
          cache-from: type=gha, scope=masterbuildcache-${{ matrix.platform}}
          cache-to: type=gha,mode=max, scope=masterbuildcache-${{ matrix.platform}}

      - name: Set Output Image
        id: set_output_image
        run: echo "::set-output name=image::jammyboi/cgwebscrape:${{ matrix.platform }}"

  combine-and-push:
          needs: [build-and-push]
          runs-on: ubuntu-latest
      
          steps:
            - name: Combine images and push as single tag
              id: combine-images
              run: |
                # Retrieve image tags from outputs of build jobs
                images=""
                for job_id in ${{ needs.build-and-push.* }}; do
                  images="${images} ${{ needs.build-and-push['${job_id}'].outputs.image }}"
                done
                
                # Convert the space-separated image tags into an array
                image_tags=($images)
                
                # Combine images using docker manifest
                docker manifest create jammyboi/cgwebscrape:latest "${image_tags[@]}"
                docker manifest push jammyboi/cgwebscrape:latest
      
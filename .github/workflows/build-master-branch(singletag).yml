name: Parallel Build and Push
on:
  push: 
    branches: 
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [linux/386, linux/amd64, linux/arm/v7, linux/arm/v8]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        id: build-image
        run: |
          docker buildx build --file Dockerfile \
            --tag "mytempimage:${{ matrix.platform }}" \
            --platform ${{ matrix.platform }} .

      - name: Push image to Docker Hub
        run: |
          docker buildx build --file Dockerfile \
            --tag "jammyboi/cgwebscrape:${{ matrix.platform }}" \
            --load .
          echo "::set-output name=image::jammyboi/cgwebscrape:${{ matrix.platform }}"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  combine-and-push:
    needs: [build-and-push]
    runs-on: ubuntu-latest

    steps:
      - name: Combine images and push as single tag
        id: combine-images
        run: |
          # Retrieve image tags from outputs of build jobs
          images=""
          for job_id in ${{ needs.build-and-push.* }}; do
            images="${images} ${{ needs.build-and-push['${job_id}'].outputs.image }}"
          done

          # Combine images using docker manifest
          docker manifest create jammyboi/cgwebscrape:latest $images
          docker manifest push jammyboi/cgwebscrape:latest

      - name: Clean up
        run: |
          # Clean up temporary images
          for job_id in ${{ needs.build-and-push.* }}; do
            docker image rm ${{ needs.build-and-push['${job_id}'].outputs.image }}
          done
